{"version":3,"sources":["config.js","Home.js","utils.js","Message.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["config","baseUrl","api","messagesRoute","messageRoute","Home","handleLogin","e","route","preventDefault","payload","username","_this","value","password","url","reqData","method","body","JSON","stringify","headers","Content-Type","mode","fetch","then","response","json","props","onLogin","history","push","catch","err","console","log","_this2","this","react_default","a","createElement","id","onSubmit","type","placeholder","ref","input","onClick","Component","timeStamp2str","timeStamp","Date","toLocaleString","Message","_ref","message","className","tiemStamp2str","socket","openSocket","Chat","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","userId","creds","token","Content-type","form","current","reset","res","React","createRef","state","messages","on","setState","_this3","map","msg","src_Message","key","App","data","validThru","react_router_dom","react_router","exact","path","render","src_Home","assign","src_Chat","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAOeA,SAPA,CACbC,QAAS,wBACTC,IAAK,OACLC,cAAe,YACfC,aAAc,aCuCDC,6MAtCbC,YAAc,SAACC,EAAGC,GAChBD,EAAEE,iBAEF,IAAMC,EAAU,CAACC,SAAUC,EAAKD,SAASE,MAAOC,SAAUF,EAAKE,SAASD,OAElEE,EAAMf,EAAOC,QAAUD,EAAOE,IAAMM,EACpCQ,EAAU,CACdC,OAAQ,OACRC,KAAMC,KAAKC,UAAUV,GACrBW,QAAS,CACPC,eAAgB,oBAElBC,KAAM,QAGRC,MAAMT,EAAKC,GACRS,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAQ,OAAId,EAAKgB,MAAMC,QAAQH,KACpCD,KAAK,kBAAMb,EAAKgB,MAAME,QAAQC,KAAK,WACnCC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,SAAUF,8EAG/B,IAAAG,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,QAAMC,GAAG,aAAaC,SAAU,SAAAnC,GAAC,OAAIA,EAAEE,mBACrC6B,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,YAAY,WAAWC,IAAK,SAAAC,GAAK,OAAIV,EAAKzB,SAASmC,KACtER,EAAAC,EAAAC,cAAA,SAAOG,KAAK,WAAWC,YAAY,WAAWC,IAAK,SAAAC,GAAK,OAAIV,EAAKtB,SAASgC,KAC1ER,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYM,QAAS,SAAAxC,GAAC,OAAI6B,EAAK9B,YAAYC,EAAG,YAAzD,SACA+B,EAAAC,EAAAC,cAAA,UAAQC,GAAG,aAAaM,QAAS,SAAAxC,GAAC,OAAI6B,EAAK9B,YAAYC,EAAG,aAA1D,mBAjCSyC,aCEJC,EALO,SAAAC,GAEpB,OADY,IAAIC,KAAKD,GACVE,kBCYEC,EAXC,SAAAC,GAAoC,IAAlC3C,EAAkC2C,EAAlC3C,SAAUuC,EAAwBI,EAAxBJ,UAAWK,EAAaD,EAAbC,QAErC,OACEjB,EAAAC,EAAAC,cAAA,MAAIgB,UAAU,cACZlB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,YAAY7C,GAC3B2B,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,aAAaC,EAAcP,IAC1CZ,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,gBAAgBD,aCJ/BG,QAASC,GAAW3D,EAAOC,SAwFlB2D,cArFb,SAAAA,EAAYhC,GAAO,IAAAhB,EAAA,OAAAiD,OAAAC,EAAA,EAAAD,CAAAxB,KAAAuB,IACjBhD,EAAAiD,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA5B,KAAMT,KAkCRsC,aAAe,SAAA3D,GACbA,EAAEE,iBAEF,IAAMC,EAAU,CACdyD,OAAQvD,EAAKgB,MAAMwC,MAAMD,OACzBE,MAAOzD,EAAKgB,MAAMwC,MAAMC,MACxBd,QAAS3C,EAAK2C,QAAQ1C,OAGxBqB,QAAQC,IAAIzB,GAEZ,IAAMK,EAAMf,EAAOC,QAAUD,EAAOE,IAAMF,EAAOI,aAC3CY,EAAU,CACdC,OAAQ,OACRC,KAAMC,KAAKC,UAAUV,GACrBW,QAAS,CAACiD,eAAgB,oBAC1B/C,KAAM,QAGRX,EAAK2D,KAAKC,QAAQC,QAElBjD,MAAMT,EAAKC,GACRS,KAAK,SAAAiD,GAAG,OAAIA,EAAI/C,SAChBF,KAAK,SAAAiD,GAAG,OAAIxC,QAAQC,IAAIuC,KACxB1C,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,UAAWF,MAzDvCrB,EAAK2D,KAAOI,IAAMC,YAClBhE,EAAKiE,MAAQ,CACXC,SAAU,IAGZpB,EAAOqB,GAAG,MAAO,SAAAD,GACflE,EAAKoE,SAAS,CAACF,eARAlE,mFAYC,IAAAwB,EAAAC,KAClBH,QAAQC,IAAI,kBAAkBE,KAAKT,MAAMwC,OAEzC,IAAMrD,EAAMf,EAAOC,QAAUD,EAAOE,IAAMF,EAAOG,cAC3Ca,EAAU,CACdC,OAAQ,MACRI,QAAS,CACPiD,eAAgB,mBAChBD,MAAShC,KAAKT,MAAMwC,MAAMC,OAE5B9C,KAAM,QAGRC,MAAMT,EAAKC,GACRS,KAAK,SAAAiD,GAAG,OAAIA,EAAI/C,SAChBF,KAAK,SAAAiD,GACE,UAAWA,GACftC,EAAK4C,SAAS,CAACF,SAAUJ,MAG5B1C,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,sCA8BpB,IAAAgD,EAAA5C,KACR,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,MAAIC,GAAG,YACJJ,KAAKwC,MAAMC,SAASI,IAAI,SAAAC,GAAG,OAC1B7C,EAAAC,EAAAC,cAAC4C,EAAD,CACEzE,SAAUwE,EAAIxE,SACduC,UAAWiC,EAAIjC,UACfK,QAAS4B,EAAI5B,QACb8B,IAAKF,EAAI1C,QAIfH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,oBAAoBC,SAAU,SAAAnC,GAAC,OAAIA,EAAEE,kBAAkBoC,IAAKR,KAAKkC,MACxEjC,EAAAC,EAAAC,cAAA,SAAOC,GAAG,sBAAsBE,KAAK,OAAOC,YAAY,mBAAmBC,IAAK,SAAAC,GAAK,OAAImC,EAAK1B,QAAQT,KACtGR,EAAAC,EAAAC,cAAA,UAAQC,GAAG,mBAAmBM,QAASV,KAAK6B,cAA5C,iBA/ESlB,aCwCJsC,cAtCb,SAAAA,IAAc,IAAA1E,EAAA,OAAAiD,OAAAC,EAAA,EAAAD,CAAAxB,KAAAiD,IACZ1E,EAAAiD,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAyB,GAAArB,KAAA5B,QAKF/B,YAAc,SAAAiF,GACZrD,QAAQC,IAAIoD,GACZ3E,EAAKoE,SACH,CACEb,OAAQoB,EAAK9C,GACb9B,SAAU4E,EAAK5E,SACf0D,MAAOkB,EAAKlB,MAAMA,MAClBmB,UAAWD,EAAKlB,MAAMmB,aAX1B5E,EAAKiE,MAAQ,GACb3C,QAAQC,IAAI,SAAUvB,EAAKgB,OAHfhB,wEAiBL,IAAAwB,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACblB,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACEnD,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,aACblB,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACEpD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAC/D,GAAD,OAC5BQ,EAAAC,EAAAC,cAACsD,EAADjC,OAAAkC,OAAA,GACMjE,EADN,CAEED,QAASO,EAAK9B,kBAGlBgC,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAOE,KAAK,QAAQC,OAAQ,SAAC/D,GAAD,OAAcQ,EAAAC,EAAAC,cAACwD,EAADnC,OAAAkC,OAAA,GAAUjE,EAAV,CAAmBsC,MAAOhC,EAAKyC,uBA/BrE7B,aCKEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAOvD,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnF,KAAK,SAAAoF,GACjCA,EAAaC","file":"static/js/main.35cb0d11.chunk.js","sourcesContent":["const config = {\n  baseUrl: 'http://localhost:3000',\n  api: '/api',\n  messagesRoute: '/messages',\n  messageRoute: '/message',\n}\n\nexport default config\n","import React, { Component } from 'react';\nimport config from './config';\n\nclass Home extends Component {\n\n  handleLogin = (e, route) => {\n    e.preventDefault();\n\n    const payload = {username: this.username.value, password: this.password.value};\n\n    const url = config.baseUrl + config.api + route;\n    const reqData = {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      mode: 'cors'\n    };\n\n    fetch(url, reqData)\n      .then(response => response.json())\n      .then(response => this.props.onLogin(response)) // Invokes App.js method\n      .then(() => this.props.history.push('/chat'))\n      .catch(err => console.log('Error:', err));\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Welcome to the Chat.</h2>\n        <h3>Please login</h3>\n        <form id=\"login-form\" onSubmit={e => e.preventDefault()}>\n          <input type=\"text\" placeholder=\"username\" ref={input => this.username=input} />\n          <input type=\"password\" placeholder=\"password\" ref={input => this.password=input} />\n          <button id=\"login-btn\" onClick={e => this.handleLogin(e, '/login')}>Login</button>\n          <button id=\"signup-btn\" onClick={e => this.handleLogin(e, '/signup')}>Signup</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","const timeStamp2str = timeStamp => {\n  const tsd = new Date(timeStamp);\n  return tsd.toLocaleString();\n}\n\nexport default timeStamp2str;\n","import React from 'react';\nimport tiemStamp2str from './utils';\n\nconst Message = ({username, timeStamp, message}) => {\n\n  return (\n    <li className=\"message-li\">\n      <div className=\"username\">{username}</div>\n      <div className=\"timeStamp\">{tiemStamp2str(timeStamp)}</div>\n      <div className=\"message-text\">{message}</div>\n    </li>\n  );\n}\n\nexport default Message;\n","import React, { Component } from 'react';\nimport Message from './Message';\nimport config from './config';\n\nimport openSocket from 'socket.io-client';\nconst socket = openSocket(config.baseUrl);\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.form = React.createRef();\n    this.state = {\n      messages: []\n    };\n\n    socket.on('msg', messages => {\n      this.setState({messages})\n    });\n  }\n\n  componentDidMount() {\n    console.log('Creds in chat: ',this.props.creds);\n    // fetch current messages\n    const url = config.baseUrl + config.api + config.messagesRoute;\n    const reqData = {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json',\n        'token': this.props.creds.token\n      },\n      mode: 'cors'\n    }\n\n    fetch(url, reqData)\n      .then(res => res.json())\n      .then(res => {\n        if (!('error' in res)) {\n          this.setState({messages: res})\n        }\n      })\n      .catch(err => console.log(err));\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const payload = {\n      userId: this.props.creds.userId,\n      token: this.props.creds.token,\n      message: this.message.value\n    };\n\n    console.log(payload);\n\n    const url = config.baseUrl + config.api + config.messageRoute;\n    const reqData = {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      headers: {'Content-type': 'application/json'},\n      mode: 'cors'\n    };\n\n    this.form.current.reset();\n\n    fetch(url, reqData)\n      .then(res => res.json())\n      .then(res => console.log(res))\n      .catch(err => console.log('Error: ', err));\n  }\n\n  render () {\n    return (\n      <div>\n        <h2>Chat</h2>\n        <ul id=\"messages\">\n          {this.state.messages.map(msg =>\n            <Message\n              username={msg.username}\n              timeStamp={msg.timeStamp}\n              message={msg.message}\n              key={msg.id}\n            />\n          )}\n        </ul>\n        <form id=\"chat-message-form\" onSubmit={e => e.preventDefault()} ref={this.form} >\n          <input id=\"message-input-field\" type=\"text\" placeholder=\"Spread the word.\" ref={input => this.message=input} />\n          <button id=\"send-message-btn\" onClick={this.handleSubmit}>Send</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './Home';\nimport Chat from './Chat';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {};\n    console.log('Props.', this.props);\n  }\n\n  handleLogin = data => {\n    console.log(data);\n    this.setState(\n      {\n        userId: data.id,\n        username: data.username,\n        token: data.token.token,\n        validThru: data.token.validThru\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" render={(history) => (\n                <Home\n                  {...history}\n                  onLogin={this.handleLogin}\n                />)}\n              />\n              <Route path=\"/chat\" render={(history) => (<Chat {...history} creds={this.state}/>)} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}